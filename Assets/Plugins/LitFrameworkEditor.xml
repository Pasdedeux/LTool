<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LitFrameworkEditor</name>
    </assembly>
    <members>
        <member name="T:LitFrameworkEditor.Editor.ArrayObject3D">
            <summary>
            编辑器模式下，对所选择的3D物体阵列分布
            </summary>
        </member>
        <member name="T:LitFrameworkEditor.Editor.SceneViewExtention">
            <summary>
            强化Scene窗口显示
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.Editor.SceneViewExtention.DrawGameObjectName(UnityEngine.Transform,UnityEditor.GizmoType)">
            <summary>
            显示选中物体名称
            </summary>
            <param name="transform"></param>
            <param name="gizmoType"></param>
        </member>
        <member name="T:LitFrameworkEditor.Editor.UGUIOptimizeStrategy">
            <summary>
            UGUI 具体修改策略，可通过委托扩展和修改
            </summary>
        </member>
        <member name="F:LitFrameworkEditor.Editor.UGUIOptimizeStrategy.imageModFunc">
            <summary>
            <para>Image 对象创建时回调处理委托，可扩展或重写</para>
            <para>默认修改属性为：image.raycastTarget = false</para>
            <para>扩展方式为：CustomComponentOptimizing.imageModFunc += ( e ) => { ( e as Image ).raycastTarget = true; };</para>
            </summary>
        </member>
        <member name="F:LitFrameworkEditor.Editor.UGUIOptimizeStrategy.txtModFunc">
            <summary>
            <para>Text 对象创建时回调处理委托，可扩展或重写</para>
            <para>默认修改属性为： 
            Text.supportRichText = false;
            Text.raycastTarget = false;</para>
            <para>扩展方式为：CustomComponentOptimizing.txtModFunc += ( e ) => { ( e as Text ).supportRichText = true; };</para>
            </summary>
        </member>
        <member name="F:LitFrameworkEditor.Editor.UGUIOptimizeStrategy.camModeFunc">
            <summary>
            创建相机时回调
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.Editor.UGUIOptimizeStrategy.ModifyImage(UnityEngine.UI.Image)">
            <summary>
            修改UGUI Image组件设置
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:LitFrameworkEditor.Editor.UGUIOptimizeStrategy.ModifyText(UnityEngine.UI.Text)">
            <summary>
            修改UGUI Text组件设置
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:LitFrameworkEditor.Editor.UGUIOptimizeStrategy.ModifyCame(UnityEngine.Camera)">
            <summary>
            修改 Camera 组件
            </summary>
            <param name="cam"></param>
        </member>
        <member name="T:LitFrameworkEditor.Editor.UGUIOptimizeCommand">
            <summary>
            UGUI 外部调用指定修改UGUI路径
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.Editor.UGUIOptimizeCommand.CreatText(UnityEditor.MenuCommand)">
            <summary>
            UGUI-Text
            </summary>
            <param name="menuCommand"></param>
        </member>
        <member name="M:LitFrameworkEditor.Editor.UGUIOptimizeCommand.CreatImage(UnityEditor.MenuCommand)">
            <summary>
            UGUI-Image
            </summary>
            <param name="menuCommand"></param>
        </member>
        <member name="M:LitFrameworkEditor.Editor.UGUIOptimizeCommand.CreateCamera(UnityEditor.MenuCommand)">
            <summary>
            创建相机
            </summary>
            <param name="munuCommand"></param>
        </member>
        <member name="T:LitFrameworkEditor.Editor.UGUIOptTool">
            <summary>
            UGUI工具基本工具库，创建对象
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.Editor.UGUIOptTool.CreatCustomUGUI``1">
            <summary>
            自定义生成对应组件
            </summary>
            <typeparam name="T">Image/Text等组件</typeparam>
            <returns></returns>
        </member>
        <member name="T:LitFrameworkEditor.LitAttributes.SetPropertyAttribute">
            <summary>
            自定义私有化属性，在可序列之后于inspector上进行变量操作时，可以在修改自身时触发其封装器的Set属性
            </summary>
        </member>
        <member name="T:LitFrameworkEditor.LitAttributes.SetPropertyDrawer">
            <summary>
            编辑器扩展属性
            </summary>
        </member>
        <member name="T:LitFrameworkEditor.EditorExtended.CSVParser">
            <summary>
            表头为3行制
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.CSVParser.GetFomatedCS">
            <summary>
            最终整合
            </summary>
            <returns>原代码文件</returns>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.CSVReader.ParseCSV(System.String)">
            <summary>
            解析csv数据
            </summary>
            <param name="csv"></param>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.CSVReader.GetData(System.Int32,System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:LitFrameworkEditor.EditorExtended.EditorMenuExtention">
            <summary>
            包含Tools菜单下一系列工具包文件
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.XlsxToCSV">
            <summary>
            将XLSX文件夹的excel文档转换为csv文件
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.CsvToCs">
            <summary>
            将SA文件夹下CSV配置文件由csv格式转换为CS代码文件
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.CreateCSFile(System.String,System.String,System.String)">
            <summary>
            创建CS文件
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.CleanEmptyDirectories">
            <summary>
            删除Assets空白目录下文件
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.DoRemoveEmptyDirectory(System.IO.DirectoryInfo,System.Collections.Generic.List{System.IO.DirectoryInfo})">
            <summary>
            移除目录下空白文件夹
            </summary>
            <param name="target">指定检测目录</param>
            <param name="dis">传入用于存储已删除目录记录的列表</param>
            <returns></returns>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.HideChoosedObject">
            <summary>
            隐藏/显示当前选中的物体，同时将当前场景和预制件设为Dirty
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.LockedChoosedComponet">
            <summary>
            锁定当前开启的Inspector窗口面板
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.GetFiles(System.IO.DirectoryInfo,System.String,System.IO.StreamWriter)">
            <summary>
            查找指定文件夹下指定后缀名的文件
            </summary>
            <param name="directory">文件夹</param>
            <param name="pattern">后缀名</param>
            <returns>文件路径</returns>
        </member>
        <member name="T:LitFrameworkEditor.EditorExtended.SearchRefrenceEditorWindow">
            <summary>
            查找引用预制件窗口
            </summary>
        </member>
        <member name="T:LitFrameworkEditor.EditorExtended.UICreateParse">
            <summary>
            UI脚本生成器
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.UICreateParse.GetFomatedCS">
            <summary>
            最终整合
            </summary>
            <returns>原代码文件</returns>
        </member>
        <member name="T:LitFrameworkEditor.EditorExtended.ResPathParse">
            <summary>
            UI/Sound路径注册类
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.Extention_Editor.RegisterAudio.RecursionAction(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            递归方法，用于查找所有文件夹
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="T:LitFrameworkEditor.Extention_Editor.MenuExtention.UGUIRaycastCheck">
            <summary>
            RayCast线框显示
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.Extention_Editor.MenuExtention.UGUIRaycastCheck.DrawElement(UnityEngine.UI.MaskableGraphic)">
            <summary>
            绘制拥有MaskableGraphic的对象项
            </summary>
            <param name="graphic"></param>
        </member>
        <member name="M:LitFrameworkEditor.Extention_Editor.MenuExtention.UGUIRaycastCheck.DrawGizmos(UnityEngine.UI.MaskableGraphic,UnityEditor.GizmoType)">
            <summary>
            根据选中与否，绘制交叉选中框
            </summary>
            <param name="source"></param>
            <param name="gizmoType"></param>
        </member>
        <member name="T:LitFrameworkEditor.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:LitFrameworkEditor.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:LitFrameworkEditor.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="F:BitmapFontExporter.fontFile">
            <summary>
            BMFont字体文件
            </summary>
        </member>
        <member name="F:BitmapFontExporter.textureFile">
            <summary>
            BMFont字体贴图
            </summary>
        </member>
        <member name="T:FrameworkConfigInspector">
            <summary>
            FrameworkConfig
            </summary>
        </member>
        <member name="T:BuildSceneSettingEditor">
            <summary>
            构建场景编辑器
            </summary>
        </member>
        <member name="M:BuildSceneSettingEditor.AddAllScenesToBuildSettings">
            <summary>
            构建场景设置为所有
            </summary>
        </member>
        <member name="M:BuildSceneSettingEditor.DeleteScenesFormBuildSettings">
            <summary>
            删除所有的构建场景
            </summary>
        </member>
        <member name="T:FolderCopy">
            <summary>
            文件拷贝
            </summary>
        </member>
        <member name="M:FolderCopy.CopyTo(System.String,System.String)">
            <summary>
            拷贝文件夹
            </summary>
            <param name="oripath">源目录  Application.dataPath + "/Resources"</param>
            <param name="despath">目标目录  Application.dataPath + "/Resources1"</param>
        </member>
        <member name="M:FolderCopy.MoveTo(System.String,System.String)">
            <summary>
            移动文件夹
            </summary>
            <param name="oripath">源目录  Application.dataPath + "/Resources"</param>
            <param name="despath">目标目录  Application.dataPath + "/Resources1"</param>
        </member>
        <member name="M:RegisterUIWindow.RecursionAction(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            递归方法，用于查找所有文件夹
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:RegisterUIWindow.RigisterUIPath(System.String)">
            <summary>
            这里将类名注册为地址类中的字典键值对，将预制件地址存储为值
            JSON将需要保存已经注册过的UI、音频文件
            JSON保存地址为StreamingAssets   configs.dat
            </summary>
        </member>
        <member name="T:GlobalEditorSetting">
            <summary>
            编辑器用全局配置
            </summary>
        </member>
        <member name="T:ResPathTemplate">
            <summary>
            路径存放模板
            </summary>
        </member>
        <member name="T:ConfigsParse">
            <summary>
            配置表路径注册类
            </summary>
        </member>
        <member name="T:ConfigsNamesTemplate">
            <summary>
            配置表访问文件配置文件
            </summary>
        </member>
    </members>
</doc>
