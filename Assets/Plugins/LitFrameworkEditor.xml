<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LitFrameworkEditor</name>
    </assembly>
    <members>
        <member name="T:BuildSceneSettingEditor">
            <summary>
            构建场景编辑器
            </summary>
        </member>
        <member name="M:BuildSceneSettingEditor.AddAllScenesToBuildSettings">
            <summary>
            构建场景设置为所有
            </summary>
        </member>
        <member name="M:BuildSceneSettingEditor.DeleteScenesFormBuildSettings">
            <summary>
            删除所有的构建场景
            </summary>
        </member>
        <member name="T:LitFrameworkEditor.EditorExtended.CSVParser">
            <summary>
            表头为3行制
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.CSVParser.GetFomatedCS">
            <summary>
            最终整合
            </summary>
            <returns>原代码文件</returns>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.CSVReader.ParseCSV(System.String)">
            <summary>
            解析csv数据
            </summary>
            <param name="csv"></param>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.CSVReader.GetData(System.Int32,System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:LitFrameworkEditor.EditorExtended.EditorMenuExtention">
            <summary>
            包含Tools菜单下一系列工具包文件
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.XlsxToCSV">
            <summary>
            将XLSX文件夹的excel文档转换为csv文件
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.CsvToCs">
            <summary>
            将SA文件夹下CSV配置文件由csv格式转换为CS代码文件
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.CreateCSFile(System.String,System.String,System.String)">
            <summary>
            创建CS文件
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.CleanEmptyDirectories">
            <summary>
            删除Assets空白目录下文件
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.DoRemoveEmptyDirectory(System.IO.DirectoryInfo,System.Collections.Generic.List{System.IO.DirectoryInfo})">
            <summary>
            移除目录下空白文件夹
            </summary>
            <param name="target">指定检测目录</param>
            <param name="dis">传入用于存储已删除目录记录的列表</param>
            <returns></returns>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.HideChoosedObject">
            <summary>
            隐藏/显示当前选中的物体，同时将当前场景和预制件设为Dirty
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.EditorMenuExtention.LockedChoosedComponet">
            <summary>
            锁定当前开启的Inspector窗口面板
            </summary>
        </member>
        <member name="T:LitFrameworkEditor.EditorExtended.SearchRefrenceEditorWindow">
            <summary>
            查找引用预制件窗口
            </summary>
        </member>
        <member name="T:LitFrameworkEditor.EditorExtended.UICreateParse">
            <summary>
            UI脚本生成器
            </summary>
        </member>
        <member name="M:LitFrameworkEditor.EditorExtended.UICreateParse.GetFomatedCS">
            <summary>
            最终整合
            </summary>
            <returns>原代码文件</returns>
        </member>
        <member name="T:LitFrameworkEditor.EditorExtended.ResPathParse">
            <summary>
            UI/Sound路径注册类
            </summary>
        </member>
        <member name="T:LitFrameworkEditor.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:LitFrameworkEditor.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:LitFrameworkEditor.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:FolderCopy">
            <summary>
            文件拷贝
            </summary>
        </member>
        <member name="M:FolderCopy.CopyTo(System.String,System.String)">
            <summary>
            拷贝文件夹
            </summary>
            <param name="oripath">源目录  Application.dataPath + "/Resources"</param>
            <param name="despath">目标目录  Application.dataPath + "/Resources1"</param>
        </member>
        <member name="M:FolderCopy.MoveTo(System.String,System.String)">
            <summary>
            移动文件夹
            </summary>
            <param name="oripath">源目录  Application.dataPath + "/Resources"</param>
            <param name="despath">目标目录  Application.dataPath + "/Resources1"</param>
        </member>
        <member name="M:RegisterUIWindow.RigisterUIPath(System.String)">
            <summary>
            这里将类名注册为地址类中的字典键值对，将预制件地址存储为值
            JSON将需要保存已经注册过的UI、音频文件
            JSON保存地址为StreamingAssets   configs.dat
            </summary>
        </member>
        <member name="T:GlobalEditorSetting">
            <summary>
            编辑器用全局配置
            </summary>
        </member>
        <member name="T:ResPathTemplate">
            <summary>
            路径存放模板
            </summary>
        </member>
    </members>
</doc>
